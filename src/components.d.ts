/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { WebComponentNode } from "./components/explorer/types";
export namespace Components {
    interface AppExample {
    }
    interface AppExplorer {
        "frameSrc": string;
        "i18n": { zoom_out: string; zoom_in: string; zoom_reset: string; canvas: string; component_explorer: string; css_variables: string; css_shadow_parts: string; };
    }
    interface AppKnobCssShadowPartList {
        /**
          * The active element selected that contains a shadow part.
         */
        "activePartEl": HTMLElement;
        /**
          * The hovered element in the explorer that matches a shadow part.
         */
        "hoveredPartEl": HTMLElement;
        "i18n": { no_results: string; };
        /**
          * The list of shadow part elements.
         */
        "items": HTMLElement[];
    }
    interface AppKnobCssVariableList {
        "i18n": { name: string; value: string; no_results: string; };
        /**
          * The list of CSS variable name/value pairs.
         */
        "items": string[][];
    }
    interface AppRoot {
    }
    interface AppTabButton {
        /**
          * `true` if the tab button is active with a selected display.
         */
        "active": boolean;
        /**
          * `true` if the tab button is disabled from selection.
         */
        "disabled": boolean;
        /**
          * The numeric index/value of the tab button.
         */
        "index": number;
    }
    interface AppTree {
        /**
          * The nested structure of web component element nodes to display in a nested list.
         */
        "node": WebComponentNode;
    }
}
declare global {
    interface HTMLAppExampleElement extends Components.AppExample, HTMLStencilElement {
    }
    var HTMLAppExampleElement: {
        prototype: HTMLAppExampleElement;
        new (): HTMLAppExampleElement;
    };
    interface HTMLAppExplorerElement extends Components.AppExplorer, HTMLStencilElement {
    }
    var HTMLAppExplorerElement: {
        prototype: HTMLAppExplorerElement;
        new (): HTMLAppExplorerElement;
    };
    interface HTMLAppKnobCssShadowPartListElement extends Components.AppKnobCssShadowPartList, HTMLStencilElement {
    }
    var HTMLAppKnobCssShadowPartListElement: {
        prototype: HTMLAppKnobCssShadowPartListElement;
        new (): HTMLAppKnobCssShadowPartListElement;
    };
    interface HTMLAppKnobCssVariableListElement extends Components.AppKnobCssVariableList, HTMLStencilElement {
    }
    var HTMLAppKnobCssVariableListElement: {
        prototype: HTMLAppKnobCssVariableListElement;
        new (): HTMLAppKnobCssVariableListElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppTabButtonElement extends Components.AppTabButton, HTMLStencilElement {
    }
    var HTMLAppTabButtonElement: {
        prototype: HTMLAppTabButtonElement;
        new (): HTMLAppTabButtonElement;
    };
    interface HTMLAppTreeElement extends Components.AppTree, HTMLStencilElement {
    }
    var HTMLAppTreeElement: {
        prototype: HTMLAppTreeElement;
        new (): HTMLAppTreeElement;
    };
    interface HTMLElementTagNameMap {
        "app-example": HTMLAppExampleElement;
        "app-explorer": HTMLAppExplorerElement;
        "app-knob-css-shadow-part-list": HTMLAppKnobCssShadowPartListElement;
        "app-knob-css-variable-list": HTMLAppKnobCssVariableListElement;
        "app-root": HTMLAppRootElement;
        "app-tab-button": HTMLAppTabButtonElement;
        "app-tree": HTMLAppTreeElement;
    }
}
declare namespace LocalJSX {
    interface AppExample {
    }
    interface AppExplorer {
        "frameSrc"?: string;
        "i18n"?: { zoom_out: string; zoom_in: string; zoom_reset: string; canvas: string; component_explorer: string; css_variables: string; css_shadow_parts: string; };
    }
    interface AppKnobCssShadowPartList {
        /**
          * The active element selected that contains a shadow part.
         */
        "activePartEl"?: HTMLElement;
        /**
          * The hovered element in the explorer that matches a shadow part.
         */
        "hoveredPartEl"?: HTMLElement;
        "i18n"?: { no_results: string; };
        /**
          * The list of shadow part elements.
         */
        "items"?: HTMLElement[];
    }
    interface AppKnobCssVariableList {
        "i18n"?: { name: string; value: string; no_results: string; };
        /**
          * The list of CSS variable name/value pairs.
         */
        "items"?: string[][];
        /**
          * Emitted when the input control for the CSS variable has a new value.
         */
        "onVariableChange"?: (event: CustomEvent<{
    name: string;
    value: string;
  }>) => void;
    }
    interface AppRoot {
    }
    interface AppTabButton {
        /**
          * `true` if the tab button is active with a selected display.
         */
        "active"?: boolean;
        /**
          * `true` if the tab button is disabled from selection.
         */
        "disabled"?: boolean;
        /**
          * The numeric index/value of the tab button.
         */
        "index"?: number;
        /**
          * Emitted when an enabled tab button is selected.
         */
        "onTabChange"?: (event: CustomEvent<number>) => void;
    }
    interface AppTree {
        /**
          * The nested structure of web component element nodes to display in a nested list.
         */
        "node"?: WebComponentNode;
        /**
          * Emits the element to remove highlighting in the canvas.
         */
        "onHighlightEnd"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * Emits the element to start highlighting in the canvas.
         */
        "onHighlightStart"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * The inspect button for a specific element was selected. Emits the `HTMLElement` of the tag selected.
         */
        "onInspect"?: (event: CustomEvent<HTMLElement>) => void;
    }
    interface IntrinsicElements {
        "app-example": AppExample;
        "app-explorer": AppExplorer;
        "app-knob-css-shadow-part-list": AppKnobCssShadowPartList;
        "app-knob-css-variable-list": AppKnobCssVariableList;
        "app-root": AppRoot;
        "app-tab-button": AppTabButton;
        "app-tree": AppTree;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-example": LocalJSX.AppExample & JSXBase.HTMLAttributes<HTMLAppExampleElement>;
            "app-explorer": LocalJSX.AppExplorer & JSXBase.HTMLAttributes<HTMLAppExplorerElement>;
            "app-knob-css-shadow-part-list": LocalJSX.AppKnobCssShadowPartList & JSXBase.HTMLAttributes<HTMLAppKnobCssShadowPartListElement>;
            "app-knob-css-variable-list": LocalJSX.AppKnobCssVariableList & JSXBase.HTMLAttributes<HTMLAppKnobCssVariableListElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-tab-button": LocalJSX.AppTabButton & JSXBase.HTMLAttributes<HTMLAppTabButtonElement>;
            "app-tree": LocalJSX.AppTree & JSXBase.HTMLAttributes<HTMLAppTreeElement>;
        }
    }
}
